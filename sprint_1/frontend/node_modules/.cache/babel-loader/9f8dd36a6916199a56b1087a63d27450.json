{"ast":null,"code":"var _jsxFileName = \"/Users/havok/KBProjects/sprint_1/frontend/src/Components/Initialtest.js\",\n    _s = $RefreshSig$();\n\n//ES7+ React/Redux ... Search \"React\" in VSCode Extensions -> Type rafce in blank js file\nimport axios from 'axios';\nimport React, { useState, useEffect, Component } from 'react';\nimport './Initialtest.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Initialtest = () => {\n  _s();\n\n  /*\n  state = {\n      response: '',\n      post: '',\n      responseToPost: '',\n  };*/\n  //instead of states in class components, we have hooks in functional components\n  const [response, post, responseToPost] = useState(''); //sets all var. to '', can use 0 or false, or etc\n\n  /*when component first mounts onto website, run the following\n  componentDidMount() {\n      this.callApi()\n          .then(res => this.setState({ response: res.express }))\n          .catch(err => console.log(err));\n  }*/\n  //Also can useEffect() which does the same\n\n  useEffect(() => {\n    this.callApi().then(res => ({\n      response: res.express\n    })).catch(err => console.log(err));\n  }, []);\n\n  const callApi = async () => {\n    return axios.get('/test/get').then(res => {\n      this.res = res.data;\n      if (res.status !== 200) throw Error(res.message);\n      return res.data;\n    }).catch(err => {\n      //console.log(\"HII: \" + err)\n      alert(\"ERROR:\" + err);\n    });\n  };\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    const response = await fetch('/test/post', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        post: this.state.post\n      })\n    });\n    const body = await response.text();\n    this.setState({\n      responseToPost: body\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"CS180 Lab Connection Test\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Server POST Message: \", this.state.response]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: this.handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Post to Server:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: this.state.post //<---? can work wthout\n        ,\n        onChange: e => this.setState({\n          post: e.target.value\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: this.state.responseToPost\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Initialtest, \"BL7lztn/pfiPKA3fDfZ8D4cB59Q=\");\n\n_c = Initialtest;\nexport default Initialtest;\n\nvar _c;\n\n$RefreshReg$(_c, \"Initialtest\");","map":{"version":3,"sources":["/Users/havok/KBProjects/sprint_1/frontend/src/Components/Initialtest.js"],"names":["axios","React","useState","useEffect","Component","Initialtest","response","post","responseToPost","callApi","then","res","express","catch","err","console","log","get","data","status","Error","message","alert","handleSubmit","e","preventDefault","fetch","method","headers","body","JSON","stringify","state","text","setState","target","value"],"mappings":"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","sourcesContent":["//ES7+ React/Redux ... Search \"React\" in VSCode Extensions -> Type rafce in blank js file\nimport axios from 'axios';\nimport React, { useState, useEffect, Component } from 'react';\nimport './Initialtest.css'\n\nconst Initialtest = () => {\n    /*\n    state = {\n        response: '',\n        post: '',\n        responseToPost: '',\n    };*/ //instead of states in class components, we have hooks in functional components\n    const [response, post, responseToPost] = useState('') //sets all var. to '', can use 0 or false, or etc\n    \n    /*when component first mounts onto website, run the following\n    componentDidMount() {\n        this.callApi()\n            .then(res => this.setState({ response: res.express }))\n            .catch(err => console.log(err));\n    }*/\n    //Also can useEffect() which does the same\n    useEffect( () => {\n        this.callApi()\n            .then(res => ({ response: res.express }))\n            .catch(err => console.log(err));\n    }, []);\n\n    const callApi = async () => {\n        return axios.get('/test/get')\n            .then(res => {\n                this.res = res.data\n                if (res.status !== 200) throw Error(res.message);\n                return res.data\n            })\n            .catch(err => {\n                //console.log(\"HII: \" + err)\n                alert(\"ERROR:\" + err)\n            })\n    };\n    \n    const handleSubmit = async e => {\n        e.preventDefault();\n        const response = await fetch('/test/post', {\n            method: 'POST',\n            headers: {\n            'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({ post: this.state.post }),\n        });\n        const body = await response.text();\n    \n        this.setState({ responseToPost: body });\n    };\n\n    return (\n        <div className=\"App\">\n        <header className=\"App-header\">\n            <p>\n            CS180 Lab Connection Test\n            </p>\n        </header>\n        <p>Server POST Message: {this.state.response}</p>\n        <form onSubmit={this.handleSubmit}>\n            <p>\n                <strong>Post to Server:</strong>\n            </p>\n            <input\n                type=\"text\"\n                value={this.state.post} //<---? can work wthout\n                onChange={e => this.setState({ post: e.target.value })}\n            />\n            <button type=\"submit\">Submit</button>\n        </form>\n        <p>{this.state.responseToPost}</p>\n        </div>\n    );\n}\n\nexport default Initialtest"]},"metadata":{},"sourceType":"module"}