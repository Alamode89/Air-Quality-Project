{"ast":null,"code":"var _jsxFileName = \"/Users/havok/KBProjects/sprint_1/frontend/src/App.js\";\nimport axios from 'axios';\nimport React, { Component } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      response: '',\n      post: '',\n      responseToPost: ''\n    };\n\n    this.callApi = async () => {\n      //const body = {\"express\":\"YAHALLO! From Express Server\"}\n      //console.log goes to f12 chrome console\n      //response.json returns object\n      //response.json.express formats the object to express\n\n      /*\n      const response = await fetch('/api/hello');\n      const body = await response.json();\n      console.log(\"TEST \" + body.express)\n      if (response.status !== 200) throw Error(body.message);\n       return body;\n      alert for error\n      */\n      //res is what is being returned | return the promise\n      return axios.get('/api/hello').then(res => {\n        this.res = res.data;\n        if (res.status !== 200) throw Error(res.message);\n        return res.data;\n      }).catch(err => {\n        console.log(\"HII: \" + err); //alert(err)\n      }); //add catch here\n    };\n\n    this.handleSubmit = async e => {\n      e.preventDefault();\n      const response = await fetch('/api/world', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          post: this.state.post\n        })\n      });\n      const body = await response.text();\n      this.setState({\n        responseToPost: body\n      });\n    };\n  }\n\n  /*when component first mounts onto website, run the following*/\n  componentDidMount() {\n    this.callApi().then(res => this.setState({\n      response: res.express\n    })).catch(err => console.log(err));\n    /*\n    axios.get('/api/hello').then(res => {\n      console.log(res.data.express);\n      this.setState({ response: res.data.express})\n    })*/\n  }\n  /* \n  async callApi() {\n   }\n  \n  callApi = async () => {\n   }\n   insall axios\n  fetch built in\n   */\n  //functional components > classes\n\n  /* aysnc run things concurrently (parallel programming), await allows the previous task\n  to run before running the following task, so parallel doesn't run the other lines of code first;\n  trick with await for retrieveing ALL data first instead of just like half the data*/\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        className: \"App-header\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"CS180 Lab Connection Test\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Server POST Message: \", this.state.response]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: this.handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Post to Server:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: this.state.post //<---? can work wthout\n          ,\n          onChange: e => this.setState({\n            post: e.target.value\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: this.state.responseToPost\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/havok/KBProjects/sprint_1/frontend/src/App.js"],"names":["axios","React","Component","App","state","response","post","responseToPost","callApi","get","then","res","data","status","Error","message","catch","err","console","log","handleSubmit","e","preventDefault","fetch","method","headers","body","JSON","stringify","text","setState","componentDidMount","express","render","target","value"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport React, { Component } from 'react';\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    response: '',\n    post: '',\n    responseToPost: '',\n  };\n  \n  /*when component first mounts onto website, run the following*/\n  componentDidMount() {\n  \n    this.callApi()\n      .then(res => this.setState({ response: res.express }))\n      .catch(err => console.log(err));\n      \n     /*\n     axios.get('/api/hello').then(res => {\n       console.log(res.data.express);\n       this.setState({ response: res.data.express})\n     })*/\n  }\n\n  /* \n  async callApi() {\n\n  }\n  \n  callApi = async () => {\n\n  }\n\n  insall axios\n  fetch built in\n\n  */\n //functional components > classes\n  \n  /* aysnc run things concurrently (parallel programming), await allows the previous task\n  to run before running the following task, so parallel doesn't run the other lines of code first;\n  trick with await for retrieveing ALL data first instead of just like half the data*/\n  callApi = async () => {\n    //const body = {\"express\":\"YAHALLO! From Express Server\"}\n    //console.log goes to f12 chrome console\n    //response.json returns object\n    //response.json.express formats the object to express\n    /*\n    const response = await fetch('/api/hello');\n    const body = await response.json();\n    console.log(\"TEST \" + body.express)\n    if (response.status !== 200) throw Error(body.message);\n\n    return body;\n    alert for error\n    */\n   //res is what is being returned | return the promise\n   return axios.get('/api/hello')\n    .then(res => {\n      this.res = res.data\n      if (res.status !== 200) throw Error(res.message);\n      return res.data\n    })\n    .catch(err => {\n      console.log(\"HII: \" + err)\n      //alert(err)\n    })\n    //add catch here\n  };\n  \n  /* e is the event that happens when you click the submit button, automatically\n  redirects to another page, but if u run e.preventdefault(), then u can define\n  what submit button does*/\n  handleSubmit = async e => {\n    e.preventDefault();\n    const response = await fetch('/api/world', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ post: this.state.post }),\n    });\n    const body = await response.text();\n    \n    this.setState({ responseToPost: body });\n  };\n  \nrender() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <p>\n            CS180 Lab Connection Test\n          </p>\n        </header>\n        <p>Server POST Message: {this.state.response}</p>\n        <form onSubmit={this.handleSubmit}>\n          <p>\n            <strong>Post to Server:</strong>\n          </p>\n          <input\n            type=\"text\"\n            value={this.state.post} //<---? can work wthout\n            onChange={e => this.setState({ post: e.target.value })}\n          />\n          <button type=\"submit\">Submit</button>\n        </form>\n        <p>{this.state.responseToPost}</p>\n      </div>\n    );\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}