[{"/Users/havok/KBProjects/sprint_1/frontend/src/index.js":"1","/Users/havok/KBProjects/sprint_1/frontend/src/App.js":"2","/Users/havok/KBProjects/sprint_1/frontend/src/reportWebVitals.js":"3","/Users/havok/KBProjects/sprint_1/frontend/src/Components/Initialtest.js":"4"},{"size":500,"mtime":1649393618328,"results":"5","hashOfConfig":"6"},{"size":188,"mtime":1649394153830,"results":"7","hashOfConfig":"6"},{"size":362,"mtime":1649393618330,"results":"8","hashOfConfig":"6"},{"size":2273,"mtime":1649396375037,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","suppressedMessages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"e9kyz5",{"filePath":"13","messages":"14","suppressedMessages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},"/Users/havok/KBProjects/sprint_1/frontend/src/index.js",[],[],"/Users/havok/KBProjects/sprint_1/frontend/src/App.js",[],[],["24","25"],"/Users/havok/KBProjects/sprint_1/frontend/src/reportWebVitals.js",[],[],"/Users/havok/KBProjects/sprint_1/frontend/src/Components/Initialtest.js",["26","27"],[],"//ES7+ React/Redux ... Search \"React\" in VSCode Extensions -> Type rafce in blank js file\nimport axios from 'axios';\nimport React, { useState, useEffect, Component } from 'react';\nimport './Initialtest.css'\n\nclass Initialtest extends Component {\n    state = {\n        response: '',\n        post: '',\n        responseToPost: '',\n    };\n    \n    /*when component first mounts onto website, run the following*/\n    componentDidMount() {\n        this.backendCallAPI()\n            .then(res => this.setState({ response: res.express }))\n            .catch(err => console.log(err));\n    }\n\n    backendCallAPI = async () => {\n        return axios.get('/test/get')\n            .then(res => {\n                this.res = res.data\n                if (res.status !== 200) throw Error(res.message);\n                return res.data\n            })\n            .catch(err => {\n                //console.log(\"HII: \" + err)\n                alert(\"ERROR:\" + err)\n            })\n    };\n    \n    handleSubmit = async e => {\n        e.preventDefault();\n        const response = await fetch('/test/post', {\n            method: 'POST',\n            headers: {\n            'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({ post: this.state.post }),\n        });\n        const body = await response.text();\n    \n        this.setState({ responseToPost: body });\n    };\n\n    render() {\n        return (\n            <div className=\"Initialtest\">\n                <header className=\"header\">\n                    <p>\n                    CS180 Lab Connection Test\n                    </p>\n                </header>\n                <p><em>Server POST Message:</em> {this.state.response}</p>\n                <form onSubmit={this.handleSubmit}>\n                    <p>\n                    <strong>Post to Server:</strong>\n                    </p>\n                    <input\n                    type=\"text\"\n                    value={this.state.post}\n                    onChange={e => this.setState({ post: e.target.value })}\n                    />\n                    <button type=\"submit\">Submit</button>\n                </form>\n                <p><em>Server GET Message:</em> {this.state.responseToPost}</p>\n            </div>\n        );\n    }\n}\n\nexport default Initialtest",{"ruleId":"28","replacedBy":"29"},{"ruleId":"30","replacedBy":"31"},{"ruleId":"32","severity":1,"message":"33","line":3,"column":17,"nodeType":"34","messageId":"35","endLine":3,"endColumn":25},{"ruleId":"32","severity":1,"message":"36","line":3,"column":27,"nodeType":"34","messageId":"35","endLine":3,"endColumn":36},"no-native-reassign",["37"],"no-negated-in-lhs",["38"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","no-global-assign","no-unsafe-negation"]